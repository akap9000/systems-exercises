-------------------------
Totally Ordered Multicast
-------------------------

clean:
$ make clean

build:
$ make

run coordinator process (proc_id = 1):
$ ./sub 1 [coordinator_port] [num_proc] [proc_1_port] [proc_2_port] ...

run worker process:
$ ./sub [proc_id] [proc_port] 1 [coordinator_port]


Testing:-

1) Run the coordinator in a terminal first
term0$ ./sub 1 44445 2 33331 33332

Run worker processes quickly after the other (open a terminal for each process and prepare the command before entering)
term1$ ./sub 2 33331 1 44445 > out2
term2$ ./sub 3 33332 1 44445 > out2

Enter the first client command and quickly enter the second client command in the other terminal.
The coordinator process will print the forwarded messages to stdout. When the coordinator prints
"Error connecting" it means the clients have exited. You can now open the output files and manually 
inspect the ordering of message delivery. You can also compare the output files using the command:
$ diff out1 out2 | grep Delivered
There should be no difference in ordering. The last delivered message(s) may be printed because they
could have been delivered to a process when the other had just exited.
